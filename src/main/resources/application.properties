spring.profiles.active=enable-swagger
server.port=9087
server.servlet.context-path=/tokenGeneratorManager/api/v1/
# ===================================================================================
#                           DATA SOURCE CONFIGURATION
# ==================================================================================
spring.datasource.url=jdbc:mysql://localhost:3306/authorizationserver?useUnicode=yes&characterEncoding=UTF-8&useSSL=FALSE
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.jpa.database=MYSQL
# ===================================================================================
#                           HIBERNATE JPA CONFIGURATION
# ===================================================================================
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update, none): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=true
spring.datasource.initialization-mode=always
## Naming strategy
#If non of the naming-strategy is provided then default table name will be _x_ and same as for column name i.e _x_
#By default Spring uses org.springframework.boot.orm.jpa.SpringNamingStrategy to generate table names. This is a
#very thin extension of org.hibernate.cfg.ImprovedNamingStrategy. The tableName method in that class is passed a
#source String value but it is unaware if it comes from a @Column.name attribute or if it has been implicitly
#generated from the field name.
#The ImprovedNamingStrategy will convert CamelCase to SNAKE_CASE where as the EJB3NamingStrategy just uses the
#table name unchanged.
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.cfg.EJB3NamingStrategy
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
# Naming strategy
# Naming strategy
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
#=========================
spring.mvc.throw-exception-if-no-handler-found=true
spring.resources.add-mappings=false
#=================================================
#               Custom configuration
#=================================================
# Values must be (ENABLE/DISABLE)
#=================================================
#         Spring DevTools configuration
#=================================================
spring.devtools.restart.enabled=true
#=========================
#file.upload.location=uploads
spring.servlet.multipart.max-file-size=500KB
spring.servlet.multipart.max-request-size=500KB
#spring.mvc.static-path-pattern=/resources/**
#spring.resources.chain.strategy.content.enabled=true
#spring.resources.chain.strategy.content.paths=/**
################### Resource Handler Configuration ##########################
#resource.handler.conf=4.1.0

#logging.level.org.springframework.web = DEBUG
logging.level.org.hibernate = DEBUG
logging.level.org.springframework = DEBUG
spring.main.allow-bean-definition-overriding=true
#check-user-scopes = true

#=========================================
security.oauth2.resource.jwt.key-value=-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApir8WHbwVHlieaY67O8Tr9bEki37ooMq+gijJ6IQsnfRSYpBPH2T6svj0l9LtiVybFVv/L1Wbi5OsBmG8NOIY9hWqN30YF92ik1NSMKbzFgvsgf0LNWuKoLcwJcYy1Dh9i41Ydyc8jmOkxTRE9JWKko1TW1EkwV0nUXqTWeAyMoWanP0265y6W9DPrWm5fQNAWz/Jp1njU9vAKvGlFq0wW9XLVHfaxKz4sK3zBdfzgNA6mYgTR+hF9tIi2Blleago+D1bGvcbcCXLxPUtibVAiiVcRwCWxYlOruQvlvspJLImQIUdCgiyuTeIH9iBODoF1RC1ap5+js170sE4xnfNQIDAQAB-----END PUBLIC KEY-----
spring.jmx.enabled=false
